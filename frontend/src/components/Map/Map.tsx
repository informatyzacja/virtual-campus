/* eslint-disable */
import 'leaflet/dist/leaflet.css';
import 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css';
import 'leaflet-defaulticon-compatibility';
import 'leaflet-easybutton/src/easy-button.js';
import 'leaflet-easybutton/src/easy-button.css';

import type { GeoJsonObject } from 'geojson';
import type { Layer } from 'leaflet';
import L from 'leaflet';
import { useCallback } from 'react';
import { GeoJSON, MapContainer, Marker, Popup, TileLayer } from 'react-leaflet';

import mapData from '@/components/Map/mapData.json';

const maxBounds = L.bounds(
  L.point([51.119462, 17.038357]),
  L.point([51.093382, 17.087239])
);

const Map = () => {
  const mapContainerRef = useCallback((reference: L.Map) => {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (!reference) {
      return;
    }

    L.control.scale().addTo(reference);
    //adds scale bars to the map

    //     L.easyButton('<FaMapMarker/>', () => {
    //         //TODO currently displaying an icon doesn't work. No idea how to use an icon from react-icons instead of a font awesome webFont
    //
    //         interface locationReference {
    //             marker?: L.Marker;
    //             circle?: L.Circle;
    //         }
    //
    //         let markerReference: L.Marker = marker([0, 0]);
    //         let circleReference: L.Circle = circle([0, 0], 0);
    //
    //         if (!markerReference.getLatLng().equals([0, 0])) {
    //             reference.removeLayer(markerReference);
    //             reference.removeLayer(circleReference);
    //             console.log("cheese")
    //
    //             // markerReference = marker([0,0]);
    //             // circleReference = circle([0,0], 0);
    //         } else {
    //             reference.locate({enableHighAccuracy: true}).on('locationfound', function (e) {
    //                 const userLocation = L.point(e.latlng.lat, e.latlng.lng);
    //                 if (!maxBounds.contains(userLocation)) {
    //                     //works only if manually set to the same bounds as in MapContainer as there is no method to retrieve them
    //                     //TODO Add a message if user is outside map bounds
    //                     return;
    //                 }
    //                 // setPosition()
    //                 reference.flyTo(e.latlng, reference.getMaxZoom());
    //                 markerReference = marker(e.latlng).bindPopup('Twoja lokalizacja');
    //                 reference.addLayer(markerReference);
    //                 circleReference = L.circle(e.latlng, e.accuracy);
    //                 reference.addLayer(circleReference);
    //                 console.log(!markerReference.getLatLng().equals([0, 0]))
    //             });
    //         }
    //     }).addTo(reference);

    // Creates a button that allows the user to enable / disable geolocation tracking and centers the map on their location
    L.easyButton({
      states: [
        {
          stateName: 'tracking',
          icon: '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 576 512" height="80%" width="80%" xmlns="http://www.w3.org/2000/svg"><path d="M288 0c-69.59 0-126 56.41-126 126 0 56.26 82.35 158.8 113.9 196.02 6.39 7.54 17.82 7.54 24.2 0C331.65 284.8 414 182.26 414 126 414 56.41 357.59 0 288 0zm0 168c-23.2 0-42-18.8-42-42s18.8-42 42-42 42 18.8 42 42-18.8 42-42 42zM20.12 215.95A32.006 32.006 0 0 0 0 245.66v250.32c0 11.32 11.43 19.06 21.94 14.86L160 448V214.92c-8.84-15.98-16.07-31.54-21.25-46.42L20.12 215.95zM288 359.67c-14.07 0-27.38-6.18-36.51-16.96-19.66-23.2-40.57-49.62-59.49-76.72v182l192 64V266c-18.92 27.09-39.82 53.52-59.49 76.72-9.13 10.77-22.44 16.95-36.51 16.95zm266.06-198.51L416 224v288l139.88-55.95A31.996 31.996 0 0 0 576 426.34V176.02c0-11.32-11.43-19.06-21.94-14.86z"></path></svg>',
          //this is super hacky, but I have given up. This is the svg generated by using FaMapMarkedAlt from React icons
          title: 'Zlokalizuj się na mapie!',
          onClick: function (control) {
            // TODO move old logic to separate function and use it here
            control.state('notTracking');
          },
        },
        {
          stateName: 'notTracking',
          icon: '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 -50 352 512" height="80%" width="80%" xmlns="http://www.w3.org/2000/svg"><path d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"></path></svg>',
          // same as above but FaTimes
          title: 'Wyłącz śledzenie lokalizacji',
          onClick: function (control) {
            // TODO move / create cancel logic here
            control.state('tracking');
          },
        },
      ],
    }).addTo(reference);
  }, []);

  return (
    <MapContainer
      center={[51.10888547242358, 17.060051620079904]}
      maxBounds={[
        [maxBounds.getTopLeft().x, maxBounds.getTopLeft().y],
        [maxBounds.getBottomRight().x, maxBounds.getBottomRight().y],
      ]}
      zoom={17}
      maxZoom={18}
      minZoom={14}
      zoomSnap={0}
      zoomDelta={0.75}
      scrollWheelZoom={true}
      style={{ height: '100%', width: '100%' }}
      ref={mapContainerRef}
    >
      <TileLayer
        maxNativeZoom={19}
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url="https://tile.openstreetmap.org/{z}/{x}/{y}.png"
      />

      <GeoJSON onEachFeature={onEachFeature} data={mapData as GeoJsonObject} />

      <Marker
        position={[51.1091064802161, 17.06046003426282]}
        draggable={false}
        // animate={true}
      >
        <Popup>C-1</Popup>
      </Marker>
    </MapContainer>
  );
};

function onEachFeature(feature: GeoJSON.Feature, layer: Layer) {
  if (feature.properties?.name) {
    layer.bindPopup(feature.properties.name as string);
  }
}

function activateGeoLocation(reference: L.Map) {}

export default Map;
